/**
 * Companies House identity service
 * Companies House identity and authentication service.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.wso2.client.api.CompaniesHouseIdentityService;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.wso2.client.model.CompaniesHouseIdentityService.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.wso2.client.model.CompaniesHouseIdentityService.AccessToken;
import org.wso2.client.model.CompaniesHouseIdentityService.TokenVerify;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class Oauth2Api {
  String basePath = "https://identity.company-information.service.gov.uk";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Request user authorisation code
  * Request authentication credentials for a web application user.
   * @param responseType Requests the type of response the authorisation API should return. For server-side web applications, this would be &#x60;code&#x60;, for JavaScript applications this would be &#x60;token&#x60;.
   * @param clientId Identifies the client that is making the request. This is the requestors client ID.
   * @param redirectUri One of the redirect URIs registered at the time of obtaining a &#x60;client_id&#x60; and &#x60;client_secret&#x60;. Must be the same as sent during the authorisation request that returned the code.
   * @param state This parameter contains any state which your application may want returned in the response roundtrip. The value should contain a nonce that your application can check to prevent cross-site-request-forgery attempts.
   * @param scope Indicates the service access your application is requesting, the user will be asked to give their consent of these permissions to be given to your application. Scope is given as a space delimited set of permissions requested by the application.
   * @param reauthenticate This parameter is used to force the user to reauthenticate for the application. This may be required to protect some user resources owned by the application.
   * @param hint This parameter is used to supply an email address to the authentication service. The value is used to pre-populate the email address web-screen field.
   * @return void
  */
  public void authorizationCode (String responseType, String clientId, String redirectUri, String state, String scope, Boolean reauthenticate, String hint) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'responseType' is set
    if (responseType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'responseType' when calling authorizationCode",
        new ApiException(400, "Missing the required parameter 'responseType' when calling authorizationCode"));
    }
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling authorizationCode",
        new ApiException(400, "Missing the required parameter 'clientId' when calling authorizationCode"));
    }
    // verify the required parameter 'redirectUri' is set
    if (redirectUri == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'redirectUri' when calling authorizationCode",
        new ApiException(400, "Missing the required parameter 'redirectUri' when calling authorizationCode"));
    }
    // verify the required parameter 'state' is set
    if (state == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'state' when calling authorizationCode",
        new ApiException(400, "Missing the required parameter 'state' when calling authorizationCode"));
    }

    // create path and map variables
    String path = "/oauth2/authorise";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_type", responseType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "client_id", clientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "redirect_uri", redirectUri));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "scope", scope));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "state", state));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "reauthenticate", reauthenticate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hint", hint));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "default" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Request user authorisation code
   * Request authentication credentials for a web application user.
   * @param responseType Requests the type of response the authorisation API should return. For server-side web applications, this would be &#x60;code&#x60;, for JavaScript applications this would be &#x60;token&#x60;.   * @param clientId Identifies the client that is making the request. This is the requestors client ID.   * @param redirectUri One of the redirect URIs registered at the time of obtaining a &#x60;client_id&#x60; and &#x60;client_secret&#x60;. Must be the same as sent during the authorisation request that returned the code.   * @param state This parameter contains any state which your application may want returned in the response roundtrip. The value should contain a nonce that your application can check to prevent cross-site-request-forgery attempts.   * @param scope Indicates the service access your application is requesting, the user will be asked to give their consent of these permissions to be given to your application. Scope is given as a space delimited set of permissions requested by the application.   * @param reauthenticate This parameter is used to force the user to reauthenticate for the application. This may be required to protect some user resources owned by the application.   * @param hint This parameter is used to supply an email address to the authentication service. The value is used to pre-populate the email address web-screen field.
  */
  public void authorizationCode (String responseType, String clientId, String redirectUri, String state, String scope, Boolean reauthenticate, String hint, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'responseType' is set
    if (responseType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'responseType' when calling authorizationCode",
        new ApiException(400, "Missing the required parameter 'responseType' when calling authorizationCode"));
    }
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling authorizationCode",
        new ApiException(400, "Missing the required parameter 'clientId' when calling authorizationCode"));
    }
    // verify the required parameter 'redirectUri' is set
    if (redirectUri == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'redirectUri' when calling authorizationCode",
        new ApiException(400, "Missing the required parameter 'redirectUri' when calling authorizationCode"));
    }
    // verify the required parameter 'state' is set
    if (state == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'state' when calling authorizationCode",
        new ApiException(400, "Missing the required parameter 'state' when calling authorizationCode"));
    }

    // create path and map variables
    String path = "/oauth2/authorise".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_type", responseType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "client_id", clientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "redirect_uri", redirectUri));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "scope", scope));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "state", state));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "reauthenticate", reauthenticate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hint", hint));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "default" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Obtain an access token
  * 
   * @param clientId Identifies the client that is making the request.
   * @param clientSecret The requesters client secret that was obtained when registering the application.
   * @param grantType The grant type defined by the OAuth 2.0 specification.
   * @param code The authorisation code returned by the authorisation API request. Required if &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;.
   * @param refreshToken The refresh token returned from the original authorisation code exchange. Required if &#x60;grant_type&#x60; is &#x60;refresh_token&#x60;.
   * @param redirectUri One of the redirect URIs registered at the time of obtaining a client_id and secret. Must be the same as sent during the authorisation request that returned the code. Required if &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;.
   * @return AccessToken
  */
  public AccessToken oauth2TokenPost (String clientId, String clientSecret, String grantType, String code, String refreshToken, String redirectUri) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling oauth2TokenPost",
        new ApiException(400, "Missing the required parameter 'clientId' when calling oauth2TokenPost"));
    }
    // verify the required parameter 'clientSecret' is set
    if (clientSecret == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientSecret' when calling oauth2TokenPost",
        new ApiException(400, "Missing the required parameter 'clientSecret' when calling oauth2TokenPost"));
    }
    // verify the required parameter 'grantType' is set
    if (grantType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'grantType' when calling oauth2TokenPost",
        new ApiException(400, "Missing the required parameter 'grantType' when calling oauth2TokenPost"));
    }

    // create path and map variables
    String path = "/oauth2/token";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (clientId != null) {
        localVarBuilder.addTextBody("client_id", ApiInvoker.parameterToString(clientId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (clientSecret != null) {
        localVarBuilder.addTextBody("client_secret", ApiInvoker.parameterToString(clientSecret), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (grantType != null) {
        localVarBuilder.addTextBody("grant_type", ApiInvoker.parameterToString(grantType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (code != null) {
        localVarBuilder.addTextBody("code", ApiInvoker.parameterToString(code), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (refreshToken != null) {
        localVarBuilder.addTextBody("refresh_token", ApiInvoker.parameterToString(refreshToken), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (redirectUri != null) {
        localVarBuilder.addTextBody("redirect_uri", ApiInvoker.parameterToString(redirectUri), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("client_id", ApiInvoker.parameterToString(clientId));
      formParams.put("client_secret", ApiInvoker.parameterToString(clientSecret));
      formParams.put("grant_type", ApiInvoker.parameterToString(grantType));
      formParams.put("code", ApiInvoker.parameterToString(code));
      formParams.put("refresh_token", ApiInvoker.parameterToString(refreshToken));
      formParams.put("redirect_uri", ApiInvoker.parameterToString(redirectUri));
    }

    String[] authNames = new String[] { "default" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccessToken) ApiInvoker.deserialize(localVarResponse, "", AccessToken.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Obtain an access token
   * 
   * @param clientId Identifies the client that is making the request.   * @param clientSecret The requesters client secret that was obtained when registering the application.   * @param grantType The grant type defined by the OAuth 2.0 specification.   * @param code The authorisation code returned by the authorisation API request. Required if &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;.   * @param refreshToken The refresh token returned from the original authorisation code exchange. Required if &#x60;grant_type&#x60; is &#x60;refresh_token&#x60;.   * @param redirectUri One of the redirect URIs registered at the time of obtaining a client_id and secret. Must be the same as sent during the authorisation request that returned the code. Required if &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;.
  */
  public void oauth2TokenPost (String clientId, String clientSecret, String grantType, String code, String refreshToken, String redirectUri, final Response.Listener<AccessToken> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling oauth2TokenPost",
        new ApiException(400, "Missing the required parameter 'clientId' when calling oauth2TokenPost"));
    }
    // verify the required parameter 'clientSecret' is set
    if (clientSecret == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientSecret' when calling oauth2TokenPost",
        new ApiException(400, "Missing the required parameter 'clientSecret' when calling oauth2TokenPost"));
    }
    // verify the required parameter 'grantType' is set
    if (grantType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'grantType' when calling oauth2TokenPost",
        new ApiException(400, "Missing the required parameter 'grantType' when calling oauth2TokenPost"));
    }

    // create path and map variables
    String path = "/oauth2/token".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (clientId != null) {
        localVarBuilder.addTextBody("client_id", ApiInvoker.parameterToString(clientId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (clientSecret != null) {
        localVarBuilder.addTextBody("client_secret", ApiInvoker.parameterToString(clientSecret), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (grantType != null) {
        localVarBuilder.addTextBody("grant_type", ApiInvoker.parameterToString(grantType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (code != null) {
        localVarBuilder.addTextBody("code", ApiInvoker.parameterToString(code), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (refreshToken != null) {
        localVarBuilder.addTextBody("refresh_token", ApiInvoker.parameterToString(refreshToken), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (redirectUri != null) {
        localVarBuilder.addTextBody("redirect_uri", ApiInvoker.parameterToString(redirectUri), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("client_id", ApiInvoker.parameterToString(clientId));
formParams.put("client_secret", ApiInvoker.parameterToString(clientSecret));
formParams.put("grant_type", ApiInvoker.parameterToString(grantType));
formParams.put("code", ApiInvoker.parameterToString(code));
formParams.put("refresh_token", ApiInvoker.parameterToString(refreshToken));
formParams.put("redirect_uri", ApiInvoker.parameterToString(redirectUri));
    }

    String[] authNames = new String[] { "default" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccessToken) ApiInvoker.deserialize(localVarResponse,  "", AccessToken.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Verify an access token
  * Query an access token, and fetch some metadata such as when the token expires and which scopes have been granted.
   * @param accessToken Access token to verify.
   * @return TokenVerify
  */
  public TokenVerify oauth2VerifyGet (String accessToken) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/oauth2/verify";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "access_token", accessToken));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "default" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (TokenVerify) ApiInvoker.deserialize(localVarResponse, "", TokenVerify.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Verify an access token
   * Query an access token, and fetch some metadata such as when the token expires and which scopes have been granted.
   * @param accessToken Access token to verify.
  */
  public void oauth2VerifyGet (String accessToken, final Response.Listener<TokenVerify> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/oauth2/verify".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "access_token", accessToken));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "default" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TokenVerify) ApiInvoker.deserialize(localVarResponse,  "", TokenVerify.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
